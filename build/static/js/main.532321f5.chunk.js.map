{"version":3,"sources":["components/Header.js","components/Cell.js","utils/index.js","components/Palette.js","components/Grid.js","components/ActionPanel.js","components/App.js","index.js"],"names":["Header","className","Cell","props","color","isActive","handleClick","style","backgroundColor","onClick","COLORS","buildCellList","cellList","i","push","Palette","activeColor","setActiveColor","map","idx","key","Grid","setCellList","cell","copy","ActionPanel","newCellList","console","log","App","useState","_setCellList","localStorage","setItem","JSON","stringify","setCellListOnLocal","useEffect","parse","getItem","getCellListFromLocal","ReactDOM","render","document","getElementById"],"mappings":"6KAQeA,EANA,WACb,OAAO,4BAAQC,UAAU,UACvB,4CCcWC,EAhBF,SAACC,GAEZ,IAAMC,EAAQD,EAAMC,MACdC,EAAWF,EAAME,SACjBC,EAAcH,EAAMG,YAE1B,OAEA,yBAAKL,UAAWI,EAAW,cAAgB,OAC3CE,MAAO,CAACC,gBAAiBJ,GACzBK,QAASH,KCXEI,EAAS,CACpB,MACA,SACA,SACA,QACA,OACA,SACA,QACA,SAEK,SAASC,IAGd,IAFA,IAAMC,EAAW,GAERC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAASE,KAAK,CACZV,MAAO,OAIX,OAAOQ,EChBT,IAqBeG,EArBC,SAACZ,GAEf,IAAMa,EAAcb,EAAMa,YACpBC,EAAiBd,EAAMc,eAE7B,OACA,yBAAKhB,UAAU,WACZS,EAAOQ,KAAI,SAACd,EAAOe,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAiBD,EAC9Bf,MAAOA,EACPC,SAAUD,IAAUY,EACpBV,YAAa,WACX,OAAOW,EAAeb,W,OCafiB,EA1BF,SAAClB,GAEZ,IAAMa,EAAcb,EAAMa,YACpBJ,EAAWT,EAAMS,SACjBU,EAAcnB,EAAMmB,YAE1B,OAAS,yBAAKrB,UAAU,QACrBW,EAASM,KAAI,SAACK,EAAMJ,GAEnB,OAAO,kBAAC,EAAD,CACPC,IAAcD,EACdf,MAAOmB,EAAKnB,MACZE,YAAa,WACX,IAAIkB,EAAI,YAAOZ,GACfY,EAAKL,GAAKf,MAAQY,EAClBM,EAAYE,WCkBLC,EAjCK,SAACtB,GAElB,IAAMa,EAAcb,EAAMa,YACpBJ,EAAWT,EAAMS,SACjBU,EAAcnB,EAAMmB,YAE3B,OAAO,yBAAKrB,UAAU,gBAEpB,4BAAQQ,QACN,WAAO,IAAMiB,EAAcf,IAC3BW,EAAYI,KAFd,aAKA,4BAAQjB,QACN,WAAO,IAAMiB,EAAcf,IAC3Be,EAAYR,KAAI,SAACK,GAAD,OAAUA,EAAKnB,MAAMY,KACvCM,EAAYI,KAHZ,YAMA,4BAAQjB,QACN,WACE,IAAMiB,EAAcd,EAASM,KAAI,SAACK,EAAMJ,GAGtC,OADAI,EAAKnB,MAAQuB,QAAQC,IAAIL,EAAKnB,OAASmB,EAAKnB,MAAQY,EAC7CO,KAEPD,EAAYI,KAPlB,gBCgCWG,EA3BH,WAAO,IAAD,EAEuBC,mBAASpB,EAAO,IAFvC,mBAERM,EAFQ,KAEKC,EAFL,OAGkBa,mBAAS,IAH3B,mBAGRlB,EAHQ,KAGEmB,EAHF,KAKTT,EAAc,SAACI,IATG,SAACd,GAC1BoB,aAAaC,QAAQ,WAAYC,KAAKC,UAAUvB,IAS9CwB,CAAmBV,GACnBK,EAAaL,IAQf,OALCW,qBAAU,WACTN,EAzByB,WAC3B,IAAInB,EAAWsB,KAAKI,MAAMN,aAAaO,QAAQ,aAE/C,OAAI3B,GAIGD,IAkBQ6B,MACX,IAGG,yBAAKvC,UAAU,OAEpB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAASe,YAAaA,EAAaC,eAAgBA,IAEnD,kBAAC,EAAD,CAAML,SAAUA,EAAUU,YAAaA,EAAaN,YAAaA,IAEjE,kBAAC,EAAD,CAAaJ,SAAUA,EAAUU,YAAaA,EAAaN,YAAaA,MC7C5EyB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,S","file":"static/js/main.532321f5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return <header className=\"header\">\n    <h1>Retro Draw</h1>\n  </header>\n}\n\nexport default Header;","import React from 'react';\n\nconst Cell = (props) => {\n\n  const color = props.color;\n  const isActive = props.isActive;\n  const handleClick = props.handleClick;\n\n  return (\n  \n  <div className={isActive ? \"cell active\" : \"cell\"}\n  style={{backgroundColor: color}}\n  onClick={handleClick}\n  ></div>\n\n  )\n}\n\nexport default Cell;","\nexport const COLORS = [\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'blue',\n  'purple',\n  'white',\n  'black'\n];\nexport function buildCellList() {\n  const cellList = [];\n\n  for (let i = 0; i < 64; i++) {\n    cellList.push({\n      color: null\n    });\n  }\n\n  return cellList;\n}","import React from 'react';\nimport Cell from './Cell';\nimport { COLORS } from '../utils';\n\nconst Palette = (props) => {\n \n  const activeColor = props.activeColor;\n  const setActiveColor = props.setActiveColor;\n\n  return ( \n  <div className=\"palette\">\n    {COLORS.map((color, idx) => {\n      return <Cell key={'palette-', idx} \n      color={color}\n      isActive={color === activeColor ? true : false} \n      handleClick={() => {\n        return setActiveColor(color)\n      }\n      }\n      />\n    })}\n  </div>\n  )\n}\n\nexport default Palette;","import React from 'react';\nimport Cell from './Cell';\n\nconst Grid = (props) => {\n\n  const activeColor = props.activeColor;\n  const cellList = props.cellList;\n  const setCellList = props.setCellList;\n\n  return ( <div className=\"grid\">\n    {cellList.map((cell, idx) => {\n\n      return <Cell \n      key={'grid-', idx}\n      color={cell.color}\n      handleClick={() => {\n        let copy = [...cellList];\n        copy[idx].color = activeColor;\n        setCellList(copy);\n      }}\n      />\n\n    }\n    )}\n\n  </div>\n  )\n}\n\nexport default Grid;","import React from 'react';\nimport { buildCellList } from '../utils';\n\nconst ActionPanel = (props) => {\n  \n   const activeColor = props.activeColor\n   const cellList = props.cellList\n   const setCellList = props.setCellList\n\n  return <div className=\"action-panel\">\n    {}\n    <button onClick={\n      () => {const newCellList = buildCellList();\n      setCellList(newCellList)}\n    }>clear all</button>\n    {}\n    <button onClick={\n      () => {const newCellList = buildCellList();\n      newCellList.map((cell) => cell.color=activeColor);\n    setCellList(newCellList)}\n    }>fill all</button>\n    {}\n    <button onClick={\n      () => {\n        const newCellList = cellList.map((cell, idx) => \n        {\n          cell.color ? console.log(cell.color) : cell.color = activeColor;\n          return cell;\n        })\n          setCellList(newCellList);\n      }\n      \n    }>fill empty</button>\n  </div>\n}\n\nexport default ActionPanel;","import React, { useState, useEffect } from 'react';\n\nimport Header from './Header';\nimport Palette from './Palette';\nimport Grid from './Grid';\nimport ActionPanel from './ActionPanel';\n\nimport {\n  COLORS,\n  buildCellList\n} from '../utils';\n\n\nconst getCellListFromLocal = () => {\n  let cellList = JSON.parse(localStorage.getItem('cellList'));\n\n  if (cellList) {\n    return cellList;\n  }\n\n  return buildCellList();\n}\n\nconst setCellListOnLocal = (cellList) => {\n  localStorage.setItem('cellList', JSON.stringify(cellList));\n}\n\nconst App = () => {\n\n   const [activeColor, setActiveColor] = useState(COLORS[0]);\n   const [cellList, _setCellList] = useState([]);\n\n   const setCellList = (newCellList) => {\n    setCellListOnLocal(newCellList);\n    _setCellList(newCellList);\n   }\n\n   useEffect(() => {\n    _setCellList(getCellListFromLocal())\n   }, []);\n\n\n  return <div className=\"app\">\n    {}\n    <Header />\n    {}\n    <Palette activeColor={activeColor} setActiveColor={setActiveColor}/>\n    {}\n    <Grid cellList={cellList} setCellList={setCellList} activeColor={activeColor} />\n    {}\n    <ActionPanel cellList={cellList} setCellList={setCellList} activeColor={activeColor} />\n  </div>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)"],"sourceRoot":""}